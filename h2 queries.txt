CREATE TABLE INDEX(
ID BIGINT AUTO_INCREMENT , 
TITLE VARCHAR(100),
LINK VARCHAR PRIMARY KEY NOT NULL);

CREATE TABLE LINKCOUNT(
LINK VARCHAR,
FOREIGN KEY ( LINK) REFERENCES INDEX ( LINK ) ON DELETE CASCADE ,
COUNT NUMBER DEFAULT 0); 

CREATE TABLE LOGIN(
ID INT  NOT NULL AUTO_INCREMENT ,
USERNAME VARCHAR(20) PRIMARY KEY NOT NULL,
PASSWORD VARCHAR(20)
ROLE VARHCAR(10));

CREATE TABLE FEEDBACK(
ID BIGINT NOT NULL AUTO_INCREMENT,
FEEDBACK VARCHAR(500)
);

CREATE TABLE SEARCHHISTORY(
ID INT NOT NULL AUTO_INCREMENT ,
SEARCHKEY VARCHAR(1000),
RESULTFOUND VARCHAR(3),
NO_OF_RESULT INT(2),
USERNAME VARCHAR(20),
DATE_TIME VARCHAR(19)
);
////////////////////////////http://www.gyanjosh.com
////////////////////////////https://material.io/guidelines/style/color.html#
////////////////////////////





SELECT * FROM INDEX WHERE TITLE LIKE '%searchkey%' OR TITLE LIKE '%searchKey%'

//STORED PROCEDURE//
DROP ALIAS IF EXISTS MYFUNCTION;
CREATE ALIAS MYFUNCTION AS $$
String updateLinkCount(java.sql.Connection con,String url) throws Exception {
    con.prepareStatement(" UPDATE LINKCOUNT SET COUNT=COUNT+1 WHERE LINK= '" +url+"').executeUpdate();
    return "Stored procedure to update the link count executed";
}
$$;

//USER SEARCH RESULT
SELECT I.TITLE,I.LINK,LC.COUNT
FROM INDEX I,LINKCOUNT LC
WHERE I.LINK=LC.LINK
AND I.TITLE LIKE '%SEARCHKEY%'
ORDER BY COUNT DESC